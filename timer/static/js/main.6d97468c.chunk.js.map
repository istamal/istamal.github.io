{"version":3,"sources":["components/Timer/Timer.jsx","components/Countdown/IntegerStep.jsx","components/Countdown/Countdown.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Timer","props","stopTimer","clearInterval","milisecondsCounter","isCliked","state","setState","startTimer","setInterval","time","minutes","seconds","miliseconds","clearProgress","stop","this","value","zero","num","classList","cn","className","onClick","React","Component","IntegerStep","isCountdownStarted","handleSlider","handleInput","handleInputSeconds","disabled","min","step","max","onChange","type","Countdown","handleSecondsInput","event","target","startTime","handleMinutesSlider","handleMinutesInput","Number","startCountdown","timer","countDown","stopCountdown","resetCountdown","audio","document","getElementById","load","playAudio","counter","play","then","catch","err","userSeconds","userMinutes","timeLeft","percent","Math","round","red","start","ref","wrapper","floor","strokeColor","id","preload","src","TabPane","Tabs","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.6d97468c.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport cn from 'classnames';\r\n\r\nexport class Timer extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttime: {\r\n\t\t\t\tminutes: 0,\r\n\t\t\t\tseconds: 0,\r\n\t\t\t\tmiliseconds: 0,\r\n\t\t\t},\r\n\t\t\tisCliked: false,\r\n\t\t\tstop: false,\r\n\t\t}\r\n\t}\r\n\r\n\tstopTimer = () => {\r\n\t\tclearInterval(this.milisecondsCounter);\r\n\t\tconst { isCliked } = this.state;\r\n\t\tthis.setState({ isCliked: !isCliked });\r\n\t}\r\n\r\n\tstartTimer = () => {\r\n\t\tconst { isCliked } = this.state;\r\n\t\tthis.setState({ isCliked: !isCliked });\r\n\r\n\t\tconst increment = () => {\r\n\t\t\tconst { minutes, seconds, miliseconds } = this.state.time;\r\n\t\t\tif (miliseconds === 60) {\r\n\t\t\t\tthis.setState({ time: { minutes, seconds: seconds + 1, miliseconds: 0 } });\r\n\t\t\t} else if (seconds === 60) {\r\n\t\t\t\tthis.setState({ time: { minutes: minutes + 1, seconds: 0, miliseconds } });\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({ time: { minutes, seconds, miliseconds: miliseconds + 1 } });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.milisecondsCounter = setInterval(increment, 15);\r\n\t}\r\n\r\n\tclearProgress = () => {\r\n\t\tconst { isCliked } = this.state;\r\n\t\tif (isCliked) {\r\n\t\t\tclearInterval(this.milisecondsCounter);\r\n\t\t\tthis.setState({ isCliked: false });\r\n\t\t} else {\r\n\t\t\tthis.setState({ time: { minutes: 0, seconds: 0, miliseconds: 0 } });\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { isCliked } = this.state;\r\n\t\tconst value = isCliked ? 'Пауза' : 'Запустить';\r\n\t\tconst { minutes, seconds, miliseconds } = this.state.time;\r\n\t\tconst zero = (num) => num < 10 ? 0 : '';\r\n\t\tconst classList = cn({\r\n\t\t\t'red': isCliked,\r\n\t\t\t'start': true,\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className=\"timer\">\r\n\t\t\t\t\t{`${zero(minutes)}${minutes} : ${zero(seconds)}${seconds} : ${zero(miliseconds)}${miliseconds}`}\r\n\t\t\t\t</h1>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={classList}\r\n\t\t\t\t\tonClick={ isCliked ? this.stopTimer : this.startTimer }\r\n\t\t\t\t>\r\n\t\t\t\t\t{ value }\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"reset\"\r\n\t\t\t\t\tonClick={this.clearProgress}\r\n\t\t\t\t>\r\n\t\t\t\t\tСбросить\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Slider } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst IntegerStep = (props) => {\n  const {\n    isCountdownStarted,\n    handleSlider,\n    handleInput,\n    minutes,\n    seconds,\n    handleInputSeconds,\n  } = props;\n\n  return (\n    <div>\n      <Slider\n        disabled={isCountdownStarted}\n        min={0}\n        step={15}\n        max={720 * 60}\n        onChange={handleSlider}\n        value={seconds}\n      />\n      <input\n        className=\"custom-input\"\n        disabled={isCountdownStarted}\n        min={0}\n        max={720}\n        type=\"number\"\n        value={minutes}\n        onChange={handleInput}\n      />\n      <input\n        className=\"custom-input\"\n        disabled={isCountdownStarted}\n        min={0}\n        step={15}\n        max={720 * 60}\n        type=\"number\"\n        value={seconds}\n        onChange={handleInputSeconds}\n      />\n    </div>\n  );\n};\n\nIntegerStep.propTypes = {\n  isCountdownStarted: PropTypes.bool.isRequired,\n  handleSlider: PropTypes.func.isRequired,\n  handleInput: PropTypes.func.isRequired,\n  minutes: PropTypes.number.isRequired,\n  seconds: PropTypes.number.isRequired,\n  handleInputSeconds: PropTypes.func.isRequired,\n};\n\nexport default IntegerStep;\n","import React from 'react';\nimport { Progress } from 'antd';\nimport cn from 'classnames';\nimport IntegerStep from './IntegerStep';\n\nexport default class Countdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCountdownStarted: false,\n      startTime: 0,\n      time: 0,\n    };\n    this.timer = 0;\n    this.counter = 0;\n  }\n\n  handleSecondsInput = (event) => {\n    const { value } = event.target;\n    if (+value <= (720 * 60)) {\n      this.setState({ time: value, startTime: value });\n    }\n  };\n\n  handleMinutesSlider = (value) => {\n    this.setState({ time: value, startTime: value });\n  };\n\n  handleMinutesInput = (event) => {\n    const { value } = event.target;\n    if (Number(value) <= 720) {\n      this.setState({ time: value * 60, startTime: value * 60 });\n    }\n  };\n\n  startCountdown = () => {\n    this.setState({\n      isCountdownStarted: true,\n    });\n\n    this.timer = setInterval(this.countDown, 1000);\n  };\n\n  stopCountdown = () => {\n    clearInterval(this.timer);\n    this.setState({ isCountdownStarted: false });\n  };\n\n  resetCountdown = () => {\n    const { isCountdownStarted } = this.state;\n    if (isCountdownStarted) {\n      clearInterval(this.timer);\n      this.setState({ isCountdownStarted: false });\n    } else {\n      this.setState({\n        startTime: 0,\n        time: 0,\n      });\n    }\n  };\n\n  countDown = () => {\n    const { time } = this.state;\n    this.setState({ time: time - 1 });\n    if (time === 0) {\n      this.audio = document.getElementById('audio');\n      this.audio.load();\n      this.playAudio();\n      clearInterval(this.timer);\n      this.setState({ isCountdownStarted: false, startTime: 0, time: 0 });\n    }\n  };\n\n  playAudio() {\n    this.audio\n      .play()\n      .then(() => {})\n      .catch((err) => err);\n  }\n\n  render() {\n    const { startTime, isCountdownStarted, time } = this.state;\n\n    const value = isCountdownStarted ? 'Остановить' : 'Запустить';\n    const zero = (num) => (num < 10 ? 0 : '');\n\n    const userSeconds = time % 60;\n    const userMinutes = (time - userSeconds) / 60;\n    const timeLeft = startTime - time;\n    const percent = Math.round((timeLeft / startTime) * 100);\n\n    const classList = cn({\n      red: isCountdownStarted,\n      start: true,\n    });\n\n    return (\n      <div ref={this.wrapper}>\n        <IntegerStep\n          isCountdownStarted={isCountdownStarted}\n          minutes={Math.floor(time / 60)}\n          seconds={time}\n          handleSlider={this.handleMinutesSlider}\n          handleInput={this.handleMinutesInput}\n          handleInputSeconds={this.handleSecondsInput}\n        />\n        <h1 className=\"timer\">\n          {`${zero(userMinutes)}${userMinutes} : ${zero(userSeconds)}${userSeconds}`}\n        </h1>\n        <div className=\"progress\">\n          <Progress\n            type=\"circle\"\n            strokeColor={{\n              '0%': '#108ee9',\n              '100%': '#87d068',\n            }}\n            percent={percent}\n          />\n        </div>\n        <button\n          type=\"button\"\n          className={classList}\n          onClick={isCountdownStarted ? this.stopCountdown : this.startCountdown}\n        >\n          {value}\n        </button>\n        <button type=\"button\" className=\"reset\" onClick={this.resetCountdown}>\n          Сбросить\n        </button>\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <audio id=\"audio\" preload=\"auto\" src=\"timer.mp3\" />\n      </div>\n    );\n  }\n}\n","/* eslint-disable linebreak-style */\r\nimport React from 'react';\r\nimport './App.scss';\r\nimport 'antd/dist/antd.css';\r\nimport { Tabs } from 'antd';\r\nimport { Timer } from './components/Timer/Timer';\r\nimport Countdown from './components/Countdown/Countdown';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction App() {\r\n  return (\r\n    <Tabs defaultActiveKey=\"1\">\r\n      <TabPane tab=\"Таймер\" key=\"1\">\r\n        <Timer />\r\n      </TabPane>\r\n      <TabPane tab=\"Обратный отчет\" key=\"2\">\r\n        <Countdown />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}