{"version":3,"sources":["components/Timer/Timer.jsx","components/Countdown/IntegerStep.jsx","components/Countdown/DecimalStep.jsx","components/Countdown/Countdown.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Timer","props","stopTimer","clearInterval","milisecondsCounter","isCliked","state","setState","startTimer","setInterval","time","minutes","seconds","miliseconds","clearProgress","stop","this","value","zero","num","classList","cn","className","onClick","React","Component","IntegerStep","handleSlider","handleInput","disabled","min","max","onChange","type","InputNumber","propTypes","PropTypes","number","isRequired","DecimalStep","step","Countdown","resetTimer","timer","startTime","HandleSecondsSlider","HandleMinutesSlider","handleSecondsInput","event","target","Number","handleMinutesInput","handleStopCountdown","handleCountdown","countDown","audio","document","getElementById","load","playAudio","wrapper","createRef","play","then","file","console","log","catch","err","info","userSeconds","userMinutes","timeLeft","percent","Math","round","red","start","ref","strokeColor","id","preload","src","TabPane","Tabs","App","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8b5e8a7e.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport cn from 'classnames';\r\n\r\nexport class Timer extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttime: {\r\n\t\t\t\tminutes: 0,\r\n\t\t\t\tseconds: 0,\r\n\t\t\t\tmiliseconds: 0,\r\n\t\t\t},\r\n\t\t\tisCliked: false,\r\n\t\t\tstop: false,\r\n\t\t}\r\n\t}\r\n\r\n\tstopTimer = () => {\r\n\t\tclearInterval(this.milisecondsCounter);\r\n\t\tconst { isCliked } = this.state;\r\n\t\tthis.setState({ isCliked: !isCliked });\r\n\t}\r\n\r\n\tstartTimer = () => {\r\n\t\tconst { isCliked } = this.state;\r\n\t\tthis.setState({ isCliked: !isCliked });\r\n\r\n\t\tconst increment = () => {\r\n\t\t\tconst { minutes, seconds, miliseconds } = this.state.time;\r\n\t\t\tif (miliseconds === 60) {\r\n\t\t\t\tthis.setState({ time: { minutes, seconds: seconds + 1, miliseconds: 0 } });\r\n\t\t\t} else if (seconds === 60) {\r\n\t\t\t\tthis.setState({ time: { minutes: minutes + 1, seconds: 0, miliseconds } });\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({ time: { minutes, seconds, miliseconds: miliseconds + 1 } });\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.milisecondsCounter = setInterval(increment, 15);\r\n\t}\r\n\r\n\tclearProgress = () => {\r\n\t\tconst { isCliked } = this.state;\r\n\t\tif (isCliked) {\r\n\t\t\tclearInterval(this.milisecondsCounter);\r\n\t\t\tthis.setState({ isCliked: false });\r\n\t\t} else {\r\n\t\t\tthis.setState({ time: { minutes: 0, seconds: 0, miliseconds: 0 } });\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { isCliked } = this.state;\r\n\t\tconst value = isCliked ? 'Пауза' : 'Запустить';\r\n\t\tconst { minutes, seconds, miliseconds } = this.state.time;\r\n\t\tconst zero = (num) => num < 10 ? 0 : '';\r\n\t\tconst classList = cn({\r\n\t\t\t'red': isCliked,\r\n\t\t\t'start': true,\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className=\"timer\">\r\n\t\t\t\t\t{`${zero(minutes)}${minutes} : ${zero(seconds)}${seconds} : ${zero(miliseconds)}${miliseconds}`}\r\n\t\t\t\t</h1>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={classList}\r\n\t\t\t\t\tonClick={ isCliked ? this.stopTimer : this.startTimer }\r\n\t\t\t\t>\r\n\t\t\t\t\t{ value }\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"reset\"\r\n\t\t\t\t\tonClick={this.clearProgress}\r\n\t\t\t\t>\r\n\t\t\t\t\tСбросить\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};","/* eslint-disable linebreak-style */\r\n/* eslint-disable radix */\r\n/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Slider } from 'antd';\r\n\r\nconst IntegerStep = (props) => {\r\n  const {\r\n    isCliked,\r\n    handleSlider,\r\n    handleInput,\r\n    minutes,\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Slider\r\n        disabled={isCliked}\r\n        min={0}\r\n        max={720}\r\n        onChange={handleSlider}\r\n        value={minutes}\r\n      />\r\n      <input\r\n        className=\"custom-input\"\r\n        disabled={isCliked}\r\n        min={0}\r\n        max={720}\r\n        type=\"number\"\r\n        value={minutes}\r\n        onChange={handleInput}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IntegerStep;\r\n","/* eslint-disable linebreak-style */\r\n/* eslint-disable radix */\r\n/* eslint-disable react/prop-types */\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Slider, InputNumber } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nInputNumber.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nconst DecimalStep = (props) => {\r\n  const {\r\n    isCliked,\r\n    handleSlider,\r\n    handleInput,\r\n    seconds,\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Slider\r\n        disabled={isCliked}\r\n        min={0}\r\n        max={60}\r\n        step={15}\r\n        onChange={handleSlider}\r\n        value={seconds}\r\n      />\r\n      <input\r\n        className=\"custom-input\"\r\n        disabled={isCliked}\r\n        min={0}\r\n        max={60}\r\n        step={15}\r\n        type=\"number\"\r\n        value={seconds}\r\n        onChange={handleInput}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DecimalStep;\r\n","/* eslint-disable linebreak-style */\r\n/* eslint-disable no-console */\r\n/* eslint-disable no-shadow */\r\n/* eslint-disable consistent-return */\r\n/* eslint-disable indent */\r\n/* eslint-disable no-tabs */\r\nimport React from 'react';\r\nimport { Progress } from 'antd';\r\nimport cn from 'classnames';\r\nimport IntegerStep from './IntegerStep';\r\nimport DecimalStep from './DecimalStep';\r\n\r\nexport default class Countdown extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.wrapper = React.createRef();\r\n\t\tthis.state = {\r\n\t\t\tisCliked: false,\r\n\t\t\tstartTime: 0,\r\n\t\t\tseconds: 0,\r\n\t\t\tminutes: 0,\r\n\t\t\ttime: 0,\r\n\t\t};\r\n\t\tthis.timer = 0;\r\n\t}\r\n\r\n\tresetTimer = () => {\r\n\t\tconst { isCliked, time } = this.state;\r\n\t\tconst seconds = time % 60;\r\n\t\tconst minutes = (time - seconds) / 60;\r\n\t\tif (isCliked) {\r\n\t\t\tclearInterval(this.timer);\r\n\t\t\tthis.setState({ isCliked: false, minutes, seconds });\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\tminutes: 0,\r\n\t\t\t\tseconds: 0,\r\n\t\t\t\tstartTime: 0,\r\n\t\t\t\ttime: 0,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tHandleSecondsSlider = (value) => {\r\n\t\tthis.setState({ seconds: value });\r\n\t};\r\n\r\n\tHandleMinutesSlider = (value) => {\r\n\t\tthis.setState({ minutes: value });\r\n\t}\r\n\r\n\thandleSecondsInput = (event) => {\r\n\t\tconst { value } = event.target;\r\n    if (Number(value) > 60) {\r\n      this.setState({\r\n        seconds: 60,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        seconds: value,\r\n      });\r\n    }\r\n\t}\r\n\r\n\thandleMinutesInput = (event) => {\r\n\t\tconst { value } = event.target;\r\n    if (Number(value) > 720) {\r\n      this.setState({\r\n        minutes: 720,\r\n      });\r\n    } else {\r\n\t\t\tthis.setState({ minutes: value });\r\n    }\r\n\t}\r\n\r\n\thandleStopCountdown = () => {\r\n\t\tconst { time } = this.state;\r\n\t\tconst seconds = time % 60;\r\n\t\tconst minutes = (time - seconds) / 60;\r\n\t\tclearInterval(this.timer);\r\n\t\tthis.setState({ isCliked: false, minutes, seconds });\r\n\t}\r\n\r\n\thandleCountdown = () => {\r\n\t\tconst { minutes, seconds } = this.state;\r\n\t\tthis.setState({\r\n\t\t\ttime: Number(minutes) * 60 + Number(seconds),\r\n\t\t\tstartTime: Number(minutes) * 60 + Number(seconds),\r\n\t\t\tisCliked: true,\r\n\t\t\tseconds: 0,\r\n\t\t\tminutes: 0,\r\n\t\t});\r\n\r\n\t\tthis.timer = setInterval(this.countDown, 1000);\r\n\t}\r\n\r\n\tcountDown = () => {\r\n\t\tconst { time } = this.state;\r\n\t\tthis.setState({ time: time - 1 });\r\n\t\tif (time === 0) {\r\n\t\t\tthis.audio = document.getElementById('audio');\r\n\t\t\tthis.audio.load();\r\n\t\t\tthis.playAudio();\r\n\t\t\tclearInterval(this.timer);\r\n\t\t\tthis.setState({ isCliked: false, startTime: 0, time: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\tplayAudio() {\r\n\t\tthis.audio.play()\r\n\t\t\t.then((file) => {\r\n\t\t\t\tconsole.log(file);\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.info(err));\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tstartTime,\r\n\t\t\tisCliked,\r\n\t\t\ttime,\r\n\t\t\tseconds,\r\n\t\t\tminutes,\r\n\t\t} = this.state;\r\n\r\n\t\tconst value = isCliked ? 'Остановить' : 'Запустить';\r\n\t\tconst zero = (num) => (num < 10 ? 0 : '');\r\n\r\n\t\tconst userSeconds = time % 60;\r\n\t\tconst userMinutes = (time - userSeconds) / 60;\r\n\t\tconst timeLeft = startTime - time;\r\n\t\tconst percent = Math.round((timeLeft / startTime) * 100);\r\n\r\n\t\tconst classList = cn({\r\n\t\t\tred: isCliked,\r\n\t\t\tstart: true,\r\n\t\t});\r\n\r\n\t\treturn (\r\n  <div ref={this.wrapper}>\r\n    <IntegerStep\r\n      isCliked={isCliked}\r\n      minutes={minutes}\r\n      handleSlider={this.HandleMinutesSlider}\r\n      handleInput={this.handleMinutesInput}\r\n    />\r\n    <DecimalStep\r\n      isCliked={isCliked}\r\n      seconds={seconds}\r\n      handleSlider={this.HandleSecondsSlider}\r\n      handleInput={this.handleSecondsInput}\r\n    />\r\n    <h1 className=\"timer\">{`${zero(userMinutes)}${userMinutes} : ${zero(userSeconds)}${userSeconds}`}</h1>\r\n    <div className=\"progress\">\r\n      <Progress\r\n        type=\"circle\"\r\n        strokeColor={{\r\n\t\t\t\t\t'0%': '#108ee9',\r\n\t\t\t\t\t'100%': '#87d068',\r\n\t\t\t\t}}\r\n        percent={percent}\r\n      />\r\n    </div>\r\n    <button type=\"button\" className={classList} onClick={isCliked ? this.handleStopCountdown : this.handleCountdown}>\r\n      {value}\r\n    </button>\r\n    <button type=\"button\" className=\"reset\" onClick={this.resetTimer}>\r\n      Сбросить\r\n    </button>\r\n    {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\r\n    <audio id=\"audio\" preload=\"auto\" src=\"timer.mp3\" />\r\n  </div>\r\n\t\t);\r\n\t}\r\n}\r\n","/* eslint-disable linebreak-style */\r\nimport React from 'react';\r\nimport './App.scss';\r\nimport 'antd/dist/antd.css';\r\nimport { Tabs } from 'antd';\r\nimport { Timer } from './components/Timer/Timer';\r\nimport Countdown from './components/Countdown/Countdown';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction App() {\r\n  return (\r\n    <Tabs defaultActiveKey=\"1\">\r\n      <TabPane tab=\"Таймер\" key=\"1\">\r\n        <Timer />\r\n      </TabPane>\r\n      <TabPane tab=\"Обратный отчет\" key=\"2\">\r\n        <Countdown />\r\n      </TabPane>\r\n    </Tabs>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}